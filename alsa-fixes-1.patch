Index: mythtv-0.24/libs/libmyth/audiooutputalsa.cpp
===================================================================
--- mythtv-0.24.orig/libs/libmyth/audiooutputalsa.cpp
+++ mythtv-0.24/libs/libmyth/audiooutputalsa.cpp
@@ -46,15 +46,19 @@ AudioOutputALSA::AudioOutputALSA(const A
     if (passthru_device == "auto")
     {
         passthru_device = main_device;
-        if (!passthru_device.contains(":"))
-            passthru_device += ":AES0=0x6,AES1=0x82,AES2=0x0,AES3=0x2";
+        if (passthru_device.contains(":"))
+        {
+            passthru_device += ",";
+        }
         else
         {
-            passthru_device = passthru_device.insert(
-                passthru_device.indexOf(":") + 1,
-                "AES0=0x6,AES1=0x82,AES2=0x0,AES3=0x2,");
+            passthru_device += ":";
         }
+        passthru_device += "AES0=0x6,AES1=0x82,AES2=0x0,AES3=0x2";
     }
+    else if (passthru_device.toLower() == "default")
+        passthru_device = main_device;
+
     InitSettings(settings);
     if (settings.init)
         Reconfigure(settings);
Index: mythtv-0.24/libs/libmyth/audiooutputsettings.cpp
===================================================================
--- mythtv-0.24.orig/libs/libmyth/audiooutputsettings.cpp
+++ mythtv-0.24/libs/libmyth/audiooutputsettings.cpp
@@ -319,6 +319,9 @@ AudioOutputSettings* AudioOutputSettings
     aosettings->m_AC3 = bAC3;
     aosettings->m_DTS = bDTS;
     aosettings->m_LPCM = bLPCM;
+        // do not passthrough stereo AC3 or stereo DTS
+        // this is required should we need to upmix and at this stage of the
+        // audio lifecycle, we don't know if we will upconvert or not
 
     return aosettings;
 }
Index: mythtv-0.24/libs/libmyth/audiosettings.cpp
===================================================================
--- mythtv-0.24.orig/libs/libmyth/audiosettings.cpp
+++ mythtv-0.24/libs/libmyth/audiosettings.cpp
@@ -103,14 +103,14 @@ AudioSettings::AudioSettings(
 
 void AudioSettings::FixPassThrough(void)
 {
-    if (passthru_device.isEmpty() || passthru_device.toLower() == "default")
+    if (passthru_device.isEmpty())
         passthru_device = "auto";
 }
 
 void AudioSettings::TrimDeviceType(void)
 {
     main_device.remove(0, 5);
-    if (passthru_device != "auto")
+    if (passthru_device != "auto" && passthru_device.toLower() != "default")
         passthru_device.remove(0, 5);
 }
 
Index: mythtv-0.24/libs/libmyth/audiooutputdx.cpp
===================================================================
--- mythtv-0.24.orig/libs/libmyth/audiooutputdx.cpp
+++ mythtv-0.24/libs/libmyth/audiooutputdx.cpp
@@ -108,7 +108,7 @@ AudioOutputDX::AudioOutputDX(const Audio
 {
     timeBeginPeriod(1);
     InitSettings(settings);
-    if (passthru_device == "auto")
+    if (passthru_device == "auto" || passthru_device.toLower() == "default")
         passthru_device = main_device;
     if (settings.init)
         Reconfigure(settings);
